plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    // mavens for Fabric-exclusives
    maven { url = "https://mvn.devos.one/#/" }
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu, EMI, Trinkets
    maven { url = "https://mvn.devos.one/snapshots/" }
    // Create Fabric, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://mvn.devos.one/releases" } // Porting Lib Releases
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge config api port
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    maven { url = "https://maven.ladysnake.org/releases" } // Trinkets

    maven { // Ritchie's Projectile Library
        url = "https://maven.realrobotix.me/master/"
        content {
            includeGroup("com.rbasamoyai")
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$architectury_api_version"

    // Fabric Language Kotlin
    modImplementation "net.fabricmc:fabric-language-kotlin:1.10.20+kotlin.1.9.24"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    // Patchouli
    modImplementation "vazkii.patchouli:Patchouli:${rootProject.patchouli_version}-FABRIC"

    // Hexcasting
    modImplementation "at.petra-k.hexcasting:hexcasting-fabric-1.20.1:${rootProject.hexcasting_version}"

    // Paucal
    modRuntimeOnly "at.petra-k.paucal:paucal-fabric-${rootProject.minecraft_version}:${rootProject.paucal_version}"

    // Cardinal Components
    modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-api:${rootProject.cca_version}"

    // Create
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

    // Create Big Cannons
    modImplementation("curse.maven:createbigcannons-646668:5555952")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
